{"/home/travis/build/npmtest/node-npmtest-gulp-combine-media-queries/test.js":"/* istanbul instrument in package npmtest_gulp_combine_media_queries */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-combine-media-queries/lib.npmtest_gulp_combine_media_queries.js":"/* istanbul instrument in package npmtest_gulp_combine_media_queries */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_combine_media_queries = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_combine_media_queries = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-combine-media-queries/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-combine-media-queries && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_combine_media_queries */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_combine_media_queries\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_combine_media_queries.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_gulp_combine_media_queries.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_combine_media_queries.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_gulp_combine_media_queries.__dirname +\n                    '/lib.npmtest_gulp_combine_media_queries.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-combine-media-queries/gulp-combine-media-queries/index.js":"var gutil = require('gulp-util');\r\nvar PluginError = gutil.PluginError;\r\nvar through = require('through2');\r\nvar defaults = require('lodash.defaults');\r\nvar parseCss = require('css-parse');\r\nvar path = require('path');\r\n\r\nvar PLUGIN_NAME = 'gulp-combine-media-queries';\r\n\r\nmodule.exports = function(options) {\r\n  'use strict';\r\n\r\n  // Default options\r\n  var options = defaults(options || {}, {\r\n    log: false,\r\n    ext: false,\r\n    use_external: false\r\n  });\r\n\r\n  // Log info only when 'options.log' is set to true\r\n  var log = function(message) {\r\n    if (options.log) {\r\n      gutil.log(message);\r\n    }\r\n  };\r\n\r\n  // Process Imports\r\n  var processImport = function(cssImport) {\r\n    var strCss = '@import ' + cssImport.import + ';' + '\\n\\n';\r\n    return strCss;\r\n  };\r\n\r\n  // Process comments\r\n  var processComment = function(comment) {\r\n    var strCss = '/*' + comment.comment + '*/';\r\n    return strCss;\r\n  };\r\n\r\n  // Process declaration\r\n  var processDeclaration = function(declaration) {\r\n    var strCss = declaration.property + ': ' + declaration.value + ';';\r\n    return strCss;\r\n  };\r\n\r\n  // Check declarations type\r\n  var commentOrDeclaration = function(declarations) {\r\n    var strCss = '';\r\n    if (declarations.type === 'declaration') {\r\n      strCss += '\\n\\t' + processDeclaration(declarations);\r\n    } else if (declarations.type === 'comment') {\r\n      strCss += ' ' + processComment(declarations);\r\n    }\r\n    return strCss;\r\n  };\r\n\r\n  // Process normal CSS rule\r\n  var processRule = function(rule) {\r\n    var strCss = '';\r\n    strCss += rule.selectors.join(',\\n') + ' {';\r\n    rule.declarations.forEach(function(rules) {\r\n      strCss += commentOrDeclaration(rules);\r\n    });\r\n    strCss += '\\n}\\n\\n';\r\n    return strCss;\r\n  };\r\n\r\n  // Check rule type\r\n  var commentOrRule = function(rule) {\r\n    var strCss = '';\r\n    if (rule.type === 'rule') {\r\n      strCss += processRule(rule);\r\n    } else if (rule.type === 'comment') {\r\n      strCss += processComment(rule) + '\\n\\n';\r\n    }\r\n    return strCss;\r\n  };\r\n\r\n  // Check keyframe type\r\n  var commentOrKeyframe = function(frame) {\r\n    var strCss = '';\r\n    if (frame.type === 'keyframe') {\r\n      strCss += frame.values.join(',') + ' {';\r\n      frame.declarations.forEach(function(declaration) {\r\n        strCss += commentOrDeclaration(declaration);\r\n      });\r\n      strCss += '\\n}\\n\\n';\r\n    } else if (frame.type === 'comment') {\r\n      strCss += processComment(frame) + '\\n\\n';\r\n    }\r\n    return strCss;\r\n  };\r\n\r\n  // Process media queries\r\n  var processMedia = function(media) {\r\n    var strCss = '';\r\n    strCss += '@media ' + media.rule + ' {\\n\\n';\r\n    media.rules.forEach(function(rule) {\r\n      strCss += commentOrRule(rule);\r\n    });\r\n    strCss += '}\\n\\n';\r\n    log('  @media ' + media.rule);\r\n\r\n    return strCss;\r\n  };\r\n\r\n  // Process keyframes\r\n  var processKeyframes = function(key) {\r\n    var strCss = '';\r\n    strCss += '@' + (typeof key.vendor !== 'undefined' ? key.vendor : '') + 'keyframes ' + key.name + ' {\\n\\n';\r\n    key.keyframes.forEach(function(keyframe) {\r\n      strCss += commentOrKeyframe(keyframe);\r\n    });\r\n    strCss += '}\\n\\n';\r\n\r\n    return strCss;\r\n  };\r\n\r\n  function transform(file, enc, cb) {\r\n\r\n    if (file.isNull()) {\r\n      this.push(file);\r\n      return cb();\r\n    }\r\n\r\n    if (file.isStream()) {\r\n      this.emit('error', new PluginError(PLUGIN_NAME, 'Streaming not supported'));\r\n      return cb();\r\n    }\r\n\r\n    var filename = path.relative(file.cwd, file.path);\r\n    var extFilename = filename.replace('.css', '.responsive.css');\r\n    var source = file.contents.toString('utf8');\r\n    var cssJson = parseCss(source);\r\n    var strStyles = [];\r\n    var strMediaStyles = [];\r\n    var processedCSS = {};\r\n\r\n    log('File ' + filename + ' found.');\r\n\r\n    processedCSS.imports = [];\r\n    processedCSS.base = [];\r\n    processedCSS.media = [];\r\n    processedCSS.media.all = [];\r\n    processedCSS.media.minWidth = [];\r\n    processedCSS.media.maxWidth = [];\r\n    processedCSS.media.minHeight = [];\r\n    processedCSS.media.maxHeight = [];\r\n    processedCSS.media.print = [];\r\n    processedCSS.media.blank = [];\r\n    processedCSS.keyframes = [];\r\n\r\n    file.contents = new Buffer(cssJson);\r\n\r\n    // For every rule in the stylesheet...\r\n    cssJson.stylesheet.rules.forEach(function(rule) {\r\n\r\n      // If the rule type is an import\r\n      if(rule.type === 'import') {\r\n        processedCSS.imports.push(rule);\r\n      }\r\n\r\n      // if the rule is a media query...\r\n      if (rule.type === 'media') {\r\n\r\n        // Create 'id' based on the query (stripped from spaces and dashes etc.)\r\n        var strMedia = rule.media.replace(/[^A-Za-z0-9]/ig, '');\r\n\r\n        // Create an array with all the media queries with the same 'id'\r\n        var item = processedCSS.media.filter(function(element) {\r\n          return (element.val === strMedia);\r\n        });\r\n\r\n        // If there are no media queries in the array, define details\r\n        if (item.length < 1) {\r\n          var mediaObj = {};\r\n          mediaObj.sortVal = parseFloat(rule.media.match(/\\d+/g));\r\n          mediaObj.rule = rule.media;\r\n          mediaObj.val = strMedia;\r\n          mediaObj.rules = [];\r\n\r\n          processedCSS.media.push(mediaObj);\r\n        }\r\n\r\n        // Compare the query to other queries\r\n        var i = 0, matched = false;\r\n        processedCSS.media.forEach(function(elm) {\r\n          if (elm.val === strMedia) {\r\n            matched = true;\r\n          }\r\n          if (!matched) {\r\n            i++;\r\n          }\r\n        });\r\n\r\n        // Push every merged query\r\n        rule.rules.forEach(function(mediaRule) {\r\n          if (mediaRule.type === 'rule' || 'comment') {\r\n            processedCSS.media[i].rules.push(mediaRule);\r\n          }\r\n        });\r\n\r\n      } else if (rule.type === 'keyframes') {\r\n        processedCSS.keyframes.push(rule);\r\n\r\n      } else if (rule.type === 'rule' || 'comment') {\r\n        processedCSS.base.push(rule);\r\n      }\r\n    });\r\n\r\n    // Sort media queries by kind, this is needed to output them in the right order\r\n    processedCSS.media.forEach(function(item) {\r\n      if (item.rule.match(/min-width/)) {\r\n        processedCSS.media.minWidth.push(item);\r\n      } else if (item.rule.match(/min-height/)) {\r\n        processedCSS.media.minHeight.push(item);\r\n      } else if (item.rule.match(/max-width/)) {\r\n        processedCSS.media.maxWidth.push(item);\r\n      } else if (item.rule.match(/max-height/)) {\r\n        processedCSS.media.maxHeight.push(item);\r\n      } else if (item.rule.match(/print/)) {\r\n        processedCSS.media.print.push(item);\r\n      } else if (item.rule.match(/all/)) {\r\n        processedCSS.media.all.push(item);\r\n      } else {\r\n        processedCSS.media.blank.push(item);\r\n      }\r\n    });\r\n\r\n    // Function to determine sort order\r\n    var determineSortOrder = function(a, b, isMax) {\r\n      var sortValA = a.sortVal,\r\n              sortValB = b.sortVal;\r\n      isMax = typeof isMax !== 'undefined' ? isMax : false;\r\n\r\n      // consider print for sorting if sortVals are equal\r\n      if (sortValA === sortValB) {\r\n        if (a.rule.match(/print/)) {\r\n          // a contains print and should be sorted after b\r\n          return 1;\r\n        }\r\n        if (b.rule.match(/print/)) {\r\n          // b contains print and should be sorted after a\r\n          return -1;\r\n        }\r\n      }\r\n\r\n      // return descending sort order for max-(width|height) media queries\r\n      if (isMax) {\r\n        return sortValB - sortValA;\r\n      }\r\n\r\n      // return ascending sort order\r\n      return sortValA - sortValB;\r\n    };\r\n\r\n    // Sort media.all queries ascending\r\n    processedCSS.media.all.sort(function(a, b) {\r\n      return determineSortOrder(a, b);\r\n    });\r\n\r\n    // Sort media.minWidth queries ascending\r\n    processedCSS.media.minWidth.sort(function(a, b) {\r\n      return determineSortOrder(a, b);\r\n    });\r\n\r\n    // Sort media.minHeight queries ascending\r\n    processedCSS.media.minHeight.sort(function(a, b) {\r\n      return determineSortOrder(a, b);\r\n    });\r\n\r\n    // Sort media.maxWidth queries descending\r\n    processedCSS.media.maxWidth.sort(function(a, b) {\r\n      return determineSortOrder(a, b, true);\r\n    });\r\n\r\n    // Sort media.maxHeight queries descending\r\n    processedCSS.media.maxHeight.sort(function(a, b) {\r\n      return determineSortOrder(a, b, true);\r\n    });\r\n\r\n    // Function to output CSS Imports\r\n    var outputImports = function(base){\r\n      base.forEach(function (rule) {\r\n        strStyles += processImport(rule);\r\n      });\r\n    };\r\n\r\n    // Function to output base CSS\r\n    var outputBase = function(base) {\r\n      base.forEach(function(rule) {\r\n        strStyles += commentOrRule(rule);\r\n      });\r\n    };\r\n\r\n    // Function to output media queries\r\n    var outputMedia = function(media) {\r\n      if (options.use_external) {\r\n        media.forEach(function(item) {\r\n          strMediaStyles += processMedia(item);\r\n        });\r\n      } else {\r\n        media.forEach(function(item) {\r\n          strStyles += processMedia(item);\r\n        });\r\n      }\r\n\r\n    }\r\n    ;\r\n\r\n    // Function to output keyframes\r\n    var outputKeyFrames = function(keyframes) {\r\n      keyframes.forEach(function(keyframe) {\r\n        strStyles += processKeyframes(keyframe);\r\n      });\r\n    };\r\n\r\n    // Check if the imports CSS was processed and print them\r\n    if (processedCSS.imports.length !== 0){\r\n      outputImports(processedCSS.imports);\r\n    }\r\n\r\n    // Check if base CSS was processed and print them\r\n    if (processedCSS.base.length !== 0) {\r\n      outputBase(processedCSS.base);\r\n    }\r\n\r\n    // Check if media queries were processed and print them in order\r\n    if (processedCSS.media.length !== 0) {\r\n      log('Processed media queries:');\r\n      outputMedia(processedCSS.media.blank);\r\n      outputMedia(processedCSS.media.all);\r\n      outputMedia(processedCSS.media.minWidth);\r\n      outputMedia(processedCSS.media.minHeight);\r\n      outputMedia(processedCSS.media.maxWidth);\r\n      outputMedia(processedCSS.media.maxHeight);\r\n      outputMedia(processedCSS.media.print);\r\n    }\r\n\r\n    // Check if keyframes were processed and print them\r\n    if (processedCSS.keyframes.length !== 0) {\r\n      outputKeyFrames(processedCSS.keyframes);\r\n    }\r\n\r\n    // Define the new file extension\r\n    if (options.ext) {\r\n      file.path = gutil.replaceExtension(file.path, options.ext);\r\n    }\r\n\r\n    // Write the new file\r\n    file.contents = new Buffer(strStyles);\r\n    log(gutil.colors.cyan('File ' + filename + ' created.'));\r\n\r\n    if (options.use_external && processedCSS.media.length !== 0) {\r\n      var f = new gutil.File({\r\n        base: file.base,\r\n        path: extFilename,\r\n        contents: new Buffer(strMediaStyles)\r\n      });\r\n      log(gutil.colors.cyan('File ' + extFilename + ' created.'));\r\n    }\r\n    this.push(file);\r\n    if (options.use_external && processedCSS.media.length !== 0) {\r\n      this.push(f);\r\n    }\r\n\r\n    cb();\r\n  }\r\n\r\n  return through.obj(transform);\r\n};\r\n"}